def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'  // Gradle plugin
apply plugin: 'io.fabric'

/*
@TODO: For native error handling on Android side, first we must export debugSymbols
@SEE: https://pub.dartlang.org/packages/flutter_crashlytics
crashlytics {
    enableNdk true
    androidNdkOut "../../debugSymbols"
    androidNdkLibsOut "../../build/app/intermediates/transforms/stripDebugSymbol/release/0/lib"
}
*/

android {
    def keystoreProperties = new Properties()
    def keystorePropertiesFile = rootProject.file('key.properties')
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.goygoy.android"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            //v1SigningEnabled true
            //v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            ndk {
                abiFilters 'armeabi-v7a'
            }
            signingConfig signingConfigs.release
        }
        debug {
            ndk {
                abiFilters  'arm64-v8a'
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.2-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0-alpha02'
    implementation 'com.google.firebase:firebase-analytics:16.0.2'
    implementation 'com.google.firebase:firebase-ads:16.0.1'
}


com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true

// Include both 32bit and 64bit arm libflutter.so files into your APK

//project.afterEvaluate {
//    assembleRelease.doLast {
//        String src
//        if(project.hasProperty('target-platform') &&
//                project.property('target-platform') == 'android-arm64') {
//           // If we are building the 64bit then we also want to add the 32bit libflutter.so
//           src = "$flutterRoot/bin/cache/artifacts/engine/android-arm-release/flutter.jar"
//        }else{
//            // If we are building the opposite (32bit), we include the 64bit libflutter.so
//            src = "$flutterRoot/bin/cache/artifacts/engine/android-arm64-release/flutter.jar"
//        }
//        copy {
//            from zipTree(src)
//            include 'lib/*/libflutter.so'
//            into "$buildDir/intermediates/jniLibs/release/0/"
//        }
//    }
//}
